/**
 * TL Manager
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 *
 * This file is part of the "TL Manager" project.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.ec.markt.tlmanager.view.pages;

import java.util.List;

import javax.swing.*;
import javax.xml.bind.JAXBElement;
import javax.xml.datatype.XMLGregorianCalendar;

import eu.europa.ec.markt.dss.common.TooltipHelper;
import eu.europa.ec.markt.tlmanager.core.Configuration;
import eu.europa.ec.markt.tlmanager.core.QNames;
import eu.europa.ec.markt.tlmanager.model.treeNodes.TSLDataNode;
import eu.europa.ec.markt.tlmanager.util.Util;
import eu.europa.ec.markt.tlmanager.view.binding.AdditionalServiceInformationConverter;
import eu.europa.ec.markt.tlmanager.view.binding.BindingManager;
import eu.europa.ec.markt.tlmanager.view.binding.InternationalNamesConverter;
import eu.europa.ec.markt.tlmanager.view.binding.NonEmptyMultiLangURIConverter;
import eu.europa.ec.markt.tlmanager.view.binding.XMLGregorianCalendarConverter;
import eu.europa.ec.markt.tlmanager.view.common.DateTimePicker;
import eu.europa.ec.markt.tlmanager.view.common.TitledPanel;
import eu.europa.ec.markt.tlmanager.view.multivalue.MultiMode;
import eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton;
import eu.europa.ec.markt.tsl.jaxb.tsl.ExtensionType;
import eu.europa.ec.markt.tsl.jaxb.tsl.ExtensionsListType;
import eu.europa.ec.markt.tsl.jaxb.tslx.TakenOverByType;

/**
 * Content page for managing all below a <tsl:ServiceInformationExtensions/>.
 *
 *
 */

public class ServiceInformationExtensionPage extends TreeDataPublisher {

    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(ServiceInformationExtensionPage.class);

    private DefaultComboBoxModel schemeTerritoryModel;

    /**
     * Instantiates a new service information extension page.
     */
    public ServiceInformationExtensionPage(JTree jtree) {
        super(jtree);
        String[] territoryItems = Util.addNoSelectionEntry(Configuration.getInstance().getCountryCodes().getCodes());
        schemeTerritoryModel = new DefaultComboBoxModel(territoryItems);
        initComponents();
        initBinding();
        tobTitle.setTitle(uiKeys.getString("ServiceInformationExtensionPage.tobTitle.title"));
        ecriTitle.setTitle(uiKeys.getString("ServiceInformationExtensionPage.ecriTitle.title"));
        asiTitle.setTitle(uiKeys.getString("ServiceInformationExtensionPage.asiTitle.title"));
        initBusinessRules();

        additionalSetup();

        ecrInfoLabel.setToolTipText(Configuration.getInstance().getTimeZoneName());
        TooltipHelper.registerComponentAtTooltipManager(ecrInfoLabel);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setName() {
        setName(TreeDataPublisher.SERVICE_INFORMATION_EXTENSION_PAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void setupMandatoryLabels() {
        // nop
    }

    private void initBusinessRules() {
        criticalECRI.setSelected(false);
        criticalECRI.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tobTitle = new TitledPanel();
        jPanel1 = new JPanel();
        criticalTOB = new JCheckBox();
        uriLabel = new JLabel();
        tspName = new MultivalueButton(MultiMode.MULTILANG_TEXT, Configuration.LanguageCodes.getEnglishLanguage(), null);
        schemeOperatorName = new MultivalueButton(MultiMode.MULTILANG_TEXT, Configuration.LanguageCodes.getEnglishLanguage(), null);
        tspNameLabel = new JLabel();
        schemeOperatorNameLabel = new JLabel();
        schemeTerritoryLabel = new JLabel();
        schemeTerritory = new JComboBox();
        uri = new JTextField();
        ecriTitle = new TitledPanel();
        criticalECRI = new JCheckBox();
        ecrInfoLabel = new JLabel();
        ecrInfo = new DateTimePicker();
        asiTitle = new TitledPanel();
        additionalServiceInformation = new MultivalueButton(MultiMode.MULTI_ASI, null, null);
        additionalServiceInformationLabel = new JLabel();

        criticalTOB.setText(uiKeys.getString("ServiceInformationExtensionPage.criticalTOB.text")); // NOI18N

        uriLabel.setLabelFor(uri);
        uriLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.uriLabel.text")); // NOI18N

        tspNameLabel.setLabelFor(tspName);
        tspNameLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.tspNameLabel.text")); // NOI18N

        schemeOperatorNameLabel.setLabelFor(schemeOperatorName);
        schemeOperatorNameLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.schemeOperatorNameLabel.text")); // NOI18N

        schemeTerritoryLabel.setLabelFor(schemeTerritory);
        schemeTerritoryLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.schemeTerritoryLabel.text")); // NOI18N

        schemeTerritory.setEditable(!Configuration.getInstance().isEuMode());
        schemeTerritory.setModel(schemeTerritoryModel);

        uri.setName("uri"); // NOI18N

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(
              jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(
                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(tspNameLabel).addComponent(schemeOperatorNameLabel).addComponent(uriLabel)
                          .addComponent(schemeTerritoryLabel)).addGap(26, 26, 26).addGroup(
                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(uri, GroupLayout.PREFERRED_SIZE, 320, GroupLayout.PREFERRED_SIZE).addGroup(
                          jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addComponent(schemeTerritory, GroupLayout.Alignment.LEADING, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(schemeOperatorName, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tspName, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(criticalTOB)).addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(
              jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup().addComponent(criticalTOB).addGap(16, 16, 16).addComponent(uriLabel))
                    .addComponent(uri, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
              .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(tspNameLabel)
                    .addComponent(tspName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
              .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(
                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(schemeOperatorNameLabel)
                          .addComponent(schemeOperatorName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
              .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addGroup(
                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(schemeTerritoryLabel)
                          .addComponent(schemeTerritory, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
              .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        GroupLayout tobTitleLayout = new GroupLayout(tobTitle);
        tobTitle.setLayout(tobTitleLayout);
        tobTitleLayout.setHorizontalGroup(tobTitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
              tobTitleLayout.createSequentialGroup().addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(186, Short.MAX_VALUE)));
        tobTitleLayout.setVerticalGroup(tobTitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
              .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE));

        criticalECRI.setText(uiKeys.getString("ServiceInformationExtensionPage.criticalECRI.text")); // NOI18N

        ecrInfoLabel.setLabelFor(ecrInfo);
        ecrInfoLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.ecrInfoLabel.text")); // NOI18N

        ecrInfo.setName("ecrInfo"); // NOI18N

        GroupLayout ecriTitleLayout = new GroupLayout(ecriTitle);
        ecriTitle.setLayout(ecriTitleLayout);
        ecriTitleLayout.setHorizontalGroup(ecriTitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(ecriTitleLayout.createSequentialGroup().addContainerGap()
              .addGroup(ecriTitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(criticalECRI).addGroup(
                    ecriTitleLayout.createSequentialGroup().addComponent(ecrInfoLabel).addGap(10, 10, 10).addComponent(ecrInfo, GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)))
              .addContainerGap()));
        ecriTitleLayout.setVerticalGroup(ecriTitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(ecriTitleLayout.createSequentialGroup().addContainerGap()
              .addGroup(ecriTitleLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(ecrInfo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGroup(ecriTitleLayout.createSequentialGroup().addComponent(criticalECRI).addGap(19, 19, 19).addComponent(ecrInfoLabel)))
              .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        additionalServiceInformation.setName("additionalServiceInformation"); // NOI18N

        additionalServiceInformationLabel.setLabelFor(additionalServiceInformation);
        additionalServiceInformationLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.additionalServiceInformationLabel.text")); // NOI18N

        GroupLayout asiTitleLayout = new GroupLayout(asiTitle);
        asiTitle.setLayout(asiTitleLayout);
        asiTitleLayout.setHorizontalGroup(asiTitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
              asiTitleLayout.createSequentialGroup().addContainerGap().addComponent(additionalServiceInformationLabel).addGap(26, 26, 26)
                    .addComponent(additionalServiceInformation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(217, Short.MAX_VALUE)));
        asiTitleLayout.setVerticalGroup(asiTitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(asiTitleLayout.createSequentialGroup().addContainerGap()
              .addGroup(asiTitleLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(additionalServiceInformation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(additionalServiceInformationLabel)).addContainerGap(28, Short.MAX_VALUE)));

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(
              layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(ecriTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tobTitle, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(asiTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
              layout.createSequentialGroup().addContainerGap().addComponent(tobTitle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18).addComponent(ecriTitle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18)
                    .addComponent(asiTitle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private MultivalueButton additionalServiceInformation;
    private JLabel additionalServiceInformationLabel;
    private TitledPanel asiTitle;
    private JCheckBox criticalECRI;
    private JCheckBox criticalTOB;
    private DateTimePicker ecrInfo;
    private JLabel ecrInfoLabel;
    private TitledPanel ecriTitle;
    private JPanel jPanel1;
    private MultivalueButton schemeOperatorName;
    private JLabel schemeOperatorNameLabel;
    private JComboBox schemeTerritory;
    private JLabel schemeTerritoryLabel;
    private TitledPanel tobTitle;
    private MultivalueButton tspName;
    private JLabel tspNameLabel;
    private JTextField uri;
    private JLabel uriLabel;
    // End of variables declaration//GEN-END:variables

    private void initBinding() {
        if (bindingManager == null) {
            bindingManager = new BindingManager(this);
        }

        // TOB
        bindingManager.createBindingForComponent(criticalTOB, "critical", QNames._TakenOverByCritical);

        bindingManager.createBindingForComponent(uri, "URI", QNames._TakenOverByUri);
        bindingManager.appendConverter(new NonEmptyMultiLangURIConverter(), QNames._TakenOverByUri);

        bindingManager.createBindingForComponent(tspName.getMultivaluePanel(), "TSPName", QNames._TakenOverByTSPName);
        bindingManager.appendConverter(new InternationalNamesConverter(), QNames._TakenOverByTSPName);

        bindingManager.createBindingForComponent(schemeOperatorName.getMultivaluePanel(), "schemeOperatorName", QNames._TakenOverBySchemeOperatorName);
        bindingManager.appendConverter(new InternationalNamesConverter(), QNames._TakenOverBySchemeOperatorName);

        bindingManager.createBindingForComponent(schemeTerritory, "schemeTerritory", QNames._TakenOverBySchemeTerritory);

        // ECRI
        bindingManager.createBindingForComponent(criticalECRI, "critical", QNames._ExpiredCertsRevocationInfoCritical);

        bindingManager.createBindingForComponent(ecrInfo, "value", QNames._ExpiredCertsRevocationInfoDate);
        bindingManager.appendConverter(new XMLGregorianCalendarConverter(), QNames._ExpiredCertsRevocationInfoDate);

        // ASI
        bindingManager.createBindingForComponent(additionalServiceInformation.getMultivaluePanel(), "extension", QNames._AdditionalServiceInformation_QNAME.getLocalPart());
        bindingManager.appendConverter(new AdditionalServiceInformationConverter(), QNames._AdditionalServiceInformation_QNAME.getLocalPart());

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void updateViewFromData(TSLDataNode dataNode) {
        this.dataNode = dataNode;
        ExtensionsListType extensionsList = (ExtensionsListType) dataNode.getUserObject();

        LOG.debug( "Value changed {}", extensionsList);

        ExtensionType takenOverByCriticality = null, ecrInfoCriticality = null;
        TakenOverByType takenOverBy = null;
        JAXBElement<XMLGregorianCalendar> ecrInfo = null;

        // extract the extensions which are of interest for this page
        for (ExtensionType extension : extensionsList.getExtension()) {
            List<Object> content = extension.getContent();
            for (Object obj : content) {
                if (obj instanceof JAXBElement<?>) {
                    JAXBElement<?> element = (JAXBElement<?>) obj;
                    if (element.getName().equals(QNames._TakenOverBy_QNAME)) {
                        takenOverByCriticality = extension;
                        takenOverBy = (TakenOverByType) element.getValue();
                    } else if (element.getName().equals(QNames._ExpiredCertsRevocationInfo_QNAME)) {
                        ecrInfoCriticality = extension;
                        ecrInfo = (JAXBElement<XMLGregorianCalendar>) element;
                    }
                }
            }
        }

        bindingManager.unbindAll();

        // TOB
        bindingManager.amendSourceForBinding(takenOverByCriticality, QNames._TakenOverByCritical);

        bindingManager.amendSourceForBinding(takenOverBy, QNames._TakenOverByUri);
        bindingManager.amendSourceForBinding(takenOverBy, QNames._TakenOverByTSPName);
        bindingManager.amendSourceForBinding(takenOverBy, QNames._TakenOverBySchemeOperatorName);
        bindingManager.amendSourceForBinding(takenOverBy, QNames._TakenOverBySchemeTerritory);

        // ECRI
        bindingManager.amendSourceForBinding(ecrInfoCriticality, QNames._ExpiredCertsRevocationInfoCritical);
        bindingManager.amendSourceForBinding(ecrInfo, QNames._ExpiredCertsRevocationInfoDate);

        // ASI - bind the whole list of extensions ! Note: only the matching extensionTypes will be used
        // filtering is done in AdditionalServiceInformationAdapter
        bindingManager.amendSourceForBinding(extensionsList, QNames._AdditionalServiceInformation_QNAME.getLocalPart());

        bindingManager.bindAll();

        // update all the preview information on the multivalue buttons
        additionalServiceInformation.refreshContentInformation();
        schemeOperatorName.refreshContentInformation();
        tspName.refreshContentInformation();
    }
}