/**
 * TL Manager
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 *
 * This file is part of the "TL Manager" project.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.ec.markt.tlmanager.view.panel;

import eu.europa.ec.markt.dss.validation102853.CertificateToken;
import eu.europa.ec.markt.tlmanager.view.certificate.DigitalIdentityModel;

/**
 *
 *
 */
public class DigitalIdentityPanel extends javax.swing.JPanel {

	public DigitalIdentityModel digitalIdentityModel;
	private boolean hasCertificat = false;
	private CertificateToken certificate;
	private boolean isHistorical = false;

	/**
	 * Getter for certificate
	 * @return
	 */
	public CertificateToken getCertificate() {
		return certificate;
	}

	/**
	 * Creates new form DigitalIdentityPanel
	 * Creates new form DigitalIdentityPanel
	 */
	public DigitalIdentityPanel() {
		this.certificate = null;
		digitalIdentityModel = new DigitalIdentityModel();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		digitalIdentityComboBox = new javax.swing.JComboBox();
		digitalIdentityCertificatePanel = new eu.europa.ec.markt.tlmanager.view.panel.DigitalIdentityCertificatePanel();
		digitalIdentitySubjectNamePanel = new eu.europa.ec.markt.tlmanager.view.panel.DigitalIdentitySubjectNamePanel();
		digitalIdentitySKIPanel = new eu.europa.ec.markt.tlmanager.view.panel.DigitalIdentitySKIPanel();
		digitalIdentityOtherPanel = new eu.europa.ec.markt.tlmanager.view.panel.DigitalIdentityOtherPanel();

		org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DigitalIdentityPanel.class, "DigitalIdentityPanel.jLabel1.text")); // NOI18N

		digitalIdentityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Certificate", "Subject Name", "Subject Key Identifier","Other" }));
		digitalIdentityComboBox.addItemListener(new java.awt.event.ItemListener() {
			@Override
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				digitalIdentityComboBoxItemStateChanged(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addComponent(digitalIdentityOtherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(digitalIdentitySKIPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(digitalIdentitySubjectNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(digitalIdentityCertificatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(0, 0, Short.MAX_VALUE))
										.addGroup(layout.createSequentialGroup()
												.addComponent(jLabel1)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(digitalIdentityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
												.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel1)
								.addComponent(digitalIdentityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(digitalIdentityCertificatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(digitalIdentitySubjectNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(digitalIdentityOtherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(digitalIdentitySKIPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGap(0, 0, Short.MAX_VALUE)))
														.addContainerGap())
				);
	}// </editor-fold>//GEN-END:initComponents

	private void digitalIdentityComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_digitalIdentityComboBoxItemStateChanged
		final Object selectedItem = digitalIdentityComboBox.getSelectedItem();
		if (selectedItem != null) {
			if ("Certificate".equals(selectedItem)) {
				showCertificate();
				if((digitalIdentityModel != null) && (digitalIdentityModel.getCertificate() != null)){
					digitalIdentityComboBox.setEnabled(false);
				}
			} else if ("Subject Name".equals(selectedItem)) {
				if(hasCertificat || isHistorical) {
					showSubjectName();
					if((digitalIdentityModel != null) && (digitalIdentityModel.getSubjectName() != null) && !digitalIdentityModel.getSubjectName().equals("")){
						digitalIdentityComboBox.setEnabled(false);
					}
				}
			} else if ("Subject Key Identifier".equals(selectedItem)) {
				if(hasCertificat || isHistorical) {
					showSki();
					if((digitalIdentityModel != null) && (digitalIdentityModel.getSKI() != null) && !digitalIdentityModel.getSKI().equals("")){
						digitalIdentityComboBox.setEnabled(false);
					}
				}
			} else if ("Other".equals(selectedItem)) {
				if(hasCertificat || isHistorical) {
					showOther();
					if((digitalIdentityModel != null) && (digitalIdentityModel.getOTHER() != null) && !digitalIdentityModel.getOTHER().equals("")){
						digitalIdentityComboBox.setEnabled(false);
					}
				}
			}
		} else {
			digitalIdentityModel.setCertificate(null);
			digitalIdentityComboBox.setEnabled(true);
			hideAll();
		}
	}//GEN-LAST:event_digitalIdentityComboBoxItemStateChanged


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private eu.europa.ec.markt.tlmanager.view.panel.DigitalIdentityCertificatePanel digitalIdentityCertificatePanel;
	private javax.swing.JComboBox digitalIdentityComboBox;
	private eu.europa.ec.markt.tlmanager.view.panel.DigitalIdentitySKIPanel digitalIdentitySKIPanel;
	private eu.europa.ec.markt.tlmanager.view.panel.DigitalIdentitySubjectNamePanel digitalIdentitySubjectNamePanel;
	private eu.europa.ec.markt.tlmanager.view.panel.DigitalIdentityOtherPanel digitalIdentityOtherPanel;
	private javax.swing.JLabel jLabel1;
	// End of variables declaration//GEN-END:variables


	public DigitalIdentityModel getDigitalIdentityModel() {
		if (digitalIdentityModel == null) {
			return new DigitalIdentityModel();
		}

		// sync from view
		final Object selectedItem = digitalIdentityComboBox.getSelectedItem();
		if (selectedItem != null) {
			if ("Certificate".equals(selectedItem)) {
				// already sync
			} else if ("Subject Name".equals(selectedItem)) {
				digitalIdentityModel.setSubjectName(digitalIdentitySubjectNamePanel.retrieveContentInformation());
			} else if ("Subject Key Identifier".equals(selectedItem)) {
				digitalIdentityModel.setSKI(digitalIdentitySKIPanel.retrieveContentInformation());
			} else if ("Other".equals(selectedItem)){
				digitalIdentityModel.setOTHER(digitalIdentityOtherPanel.retrieveContentInformation());
			}
		} else {
			return new DigitalIdentityModel();
		}
		return digitalIdentityModel;
	}

	public void setDigitalIdentityModel(DigitalIdentityModel digitalIdentityModel) {
		this.digitalIdentityModel = digitalIdentityModel;
	}

	public void updateCurrentValues(DigitalIdentityModel value) {
		setDigitalIdentityModel(value);
		if (digitalIdentityModel != null) {
			if (digitalIdentityModel.getCertificate() != null) {
				digitalIdentityComboBox.setSelectedItem("Certificate");
			} else if (digitalIdentityModel.getSubjectName() != null) {
				digitalIdentityComboBox.setSelectedItem("Subject Name");
			} else if (digitalIdentityModel.getSKI() != null) {
				digitalIdentityComboBox.setSelectedItem("Subject Key Identifier");
			} else if (digitalIdentityModel.getOTHER() != null) {
				digitalIdentityComboBox.setSelectedItem("Other");
			} else {
				digitalIdentityComboBox.setSelectedItem(null);
			}
			digitalIdentityComboBoxItemStateChanged(null);
		}
	}

	private void hideAll() {
		digitalIdentityCertificatePanel.setVisible(false);
		digitalIdentityCertificatePanel.setDigitalIdentityModel(null);

		digitalIdentitySubjectNamePanel.setVisible(false);
		digitalIdentitySubjectNamePanel.setDigitalIdentityModel(null);

		digitalIdentitySKIPanel.setVisible(false);
		digitalIdentitySKIPanel.setDigitalIdentityModel(null);

		digitalIdentityOtherPanel.setVisible(false);
		digitalIdentityOtherPanel.setDigitalIdentityModel(null);
	}

	private void showSki() {
		digitalIdentityCertificatePanel.setVisible(false);
		digitalIdentityCertificatePanel.setDigitalIdentityModel(null);

		digitalIdentitySubjectNamePanel.setVisible(false);
		digitalIdentitySubjectNamePanel.setDigitalIdentityModel(null);

		digitalIdentitySKIPanel.setVisible(true);
		digitalIdentitySKIPanel.setCertificate(getCertificate());
		digitalIdentitySKIPanel.setDigitalIdentityModel(digitalIdentityModel);

		digitalIdentityOtherPanel.setVisible(false);
		digitalIdentityOtherPanel.setDigitalIdentityModel(null);
	}


	private void showOther() {

		digitalIdentityCertificatePanel.setVisible(false);
		digitalIdentityCertificatePanel.setDigitalIdentityModel(null);

		digitalIdentityOtherPanel.setVisible(true);
		digitalIdentityOtherPanel.setCertificate(getCertificate());
		digitalIdentityOtherPanel.setDigitalIdentityModel(digitalIdentityModel);


		digitalIdentitySKIPanel.setVisible(false);
		digitalIdentitySKIPanel.setDigitalIdentityModel(null);

		digitalIdentitySubjectNamePanel.setVisible(false);
		digitalIdentitySubjectNamePanel.setDigitalIdentityModel(null);
	}


	private void showSubjectName() {
		digitalIdentityCertificatePanel.setVisible(false);
		digitalIdentityCertificatePanel.setDigitalIdentityModel(null);

		digitalIdentitySubjectNamePanel.setVisible(true);
		digitalIdentitySubjectNamePanel.setCertificate(getCertificate());
		digitalIdentitySubjectNamePanel.setDigitalIdentityModel(digitalIdentityModel);


		digitalIdentitySKIPanel.setVisible(false);
		digitalIdentitySKIPanel.setDigitalIdentityModel(null);

		digitalIdentityOtherPanel.setVisible(false);
		digitalIdentityOtherPanel.setDigitalIdentityModel(null);
	}

	private void showCertificate() {
		digitalIdentityCertificatePanel.setVisible(true);
		digitalIdentityCertificatePanel.setDigitalIdentityModel(digitalIdentityModel);

		digitalIdentitySubjectNamePanel.setVisible(false);
		digitalIdentitySubjectNamePanel.setDigitalIdentityModel(null);

		digitalIdentitySKIPanel.setVisible(false);
		digitalIdentitySKIPanel.setDigitalIdentityModel(null);

		digitalIdentityOtherPanel.setVisible(false);
		digitalIdentityOtherPanel.setDigitalIdentityModel(null);
	}

	public void clearOnExit() {
		setDigitalIdentityModel(new DigitalIdentityModel());
		updateCurrentValues(digitalIdentityModel);
	}

	/**
	 * Update list of Digital Identity according to type (Current or Historical)
	 */
	public void setHasCertificate() {
		int index = digitalIdentityComboBox.getSelectedIndex();
		digitalIdentityComboBox.removeItem("Subject Name");
		digitalIdentityComboBox.removeItem("Subject Key Identifier");
		if(hasCertificat || isHistorical){
			digitalIdentityComboBox.addItem("Subject Name");
			digitalIdentityComboBox.addItem("Subject Key Identifier");
		}
		digitalIdentityComboBox.setSelectedIndex(index);
	}

	/**
	 * Setter of certificate
	 * @param certificate
	 */
	public void setCertificate(CertificateToken certificate) {
		this.certificate = certificate;
		hasCertificat = certificate != null;
		setHasCertificate();
	}

	/**
	 * Setter for historical
	 * @param isHistorical
	 */
	public void setHistorical(boolean isHistorical) {
		this.isHistorical = isHistorical;
	}
}
