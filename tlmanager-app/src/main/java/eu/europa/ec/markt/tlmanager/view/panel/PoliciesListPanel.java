/**
 * TL Manager
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 *
 * This file is part of the "TL Manager" project.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.ec.markt.tlmanager.view.panel;

import java.util.ResourceBundle;

import javax.swing.*;

import eu.europa.ec.markt.tlmanager.core.Configuration;
import eu.europa.ec.markt.tlmanager.model.ObjectIdentifierTypeAdapter;
import eu.europa.ec.markt.tlmanager.view.binding.ObjectIdentifierTypeConverter;
import eu.europa.ec.markt.tlmanager.view.multivalue.MultiMode;
import eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton;
import eu.europa.ec.markt.tsl.jaxb.ecc.PoliciesListType;

/**
 * A small panel for holding the values for CriteriaList PoliciesList elements
 *
 *
 */

public class PoliciesListPanel extends JPanel {

    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(PoliciesListPanel.class);


    private static final ResourceBundle uiKeys = ResourceBundle.getBundle("eu/europa/ec/markt/tlmanager/uiKeysComponents", Configuration.getInstance().getLocale());

    private PoliciesListModel model;

    /**
     * The default constructor for PoliciesListPanel.
     */
    public PoliciesListPanel() {
        model = new PoliciesListModel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        policyIdentifierLabel = new JLabel();
        policyIdentifier = new MultivalueButton(MultiMode.MULTI_POLICYIDENTIFIER, null, null);

        policyIdentifierLabel.setText("Policy Identifier Set");

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
              layout.createSequentialGroup().addContainerGap().addComponent(policyIdentifierLabel).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(policyIdentifier, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(
              layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(policyIdentifier, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addComponent(policyIdentifierLabel))
              .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private MultivalueButton policyIdentifier;
    private JLabel policyIdentifierLabel;
    // End of variables declaration//GEN-END:variables

    private void resetValuesFromModel() {
        final PoliciesListType policiesListType = model.getPoliciesListType();
        final ObjectIdentifierTypeAdapter objectIdentifierTypeAdapter = new ObjectIdentifierTypeConverter().convertForward(policiesListType.getPolicyIdentifier());
        policyIdentifier.getMultivaluePanel().setMultivalueModel(objectIdentifierTypeAdapter);
        policyIdentifier.refreshContentInformation();
    }

    /**
     * Empties all values in the model and resets ui components.
     */
    public void clearModel() {
        this.model.clear();
        resetValuesFromModel();
    }

    /**
     * Resets the component values to the one in the model.
     *
     * @param model the updated model
     */
    public void updateCurrentValues(PoliciesListModel model) {
        this.model = model;
        resetValuesFromModel();
    }

    /**
     * @return the digitalIdentityModel
     */
    public PoliciesListModel getPoliciesListModel() {
        return model;
    }

    /**
     * Sets the certificate model. Used by Binding !
     *
     * @param model the new PolicyListModel
     */
    public void setPoliciesListModel(PoliciesListModel model) {
        this.model = model;
        resetValuesFromModel();
    }
}