/**
 * TL Manager
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 *
 * This file is part of the "TL Manager" project.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.ec.markt.tlmanager.view.certificate;

import java.util.ResourceBundle;

import javax.swing.*;

import eu.europa.ec.markt.tlmanager.core.Configuration;
import eu.europa.ec.markt.tlmanager.view.multivalue.ContentWatcher;
import eu.europa.ec.markt.tlmanager.view.multivalue.MandatoryLabelHandler;
import eu.europa.ec.markt.tlmanager.view.multivalue.MultiMode;
import eu.europa.ec.markt.tlmanager.view.multivalue.content.ServiceDigitalIdentityMultivalueAdapter;
import eu.europa.ec.markt.tsl.jaxb.tsl.DigitalIdentityListType;

/**
 * Opens a <code>ServiceDigitalIdentityPanel</code> and displays short information about a certificate.
 *
 *
 */
public class ServiceDigitalIdentityPanel extends javax.swing.JPanel implements ContentWatcher {
    private static final ResourceBundle uiKeys = ResourceBundle.getBundle("eu/europa/ec/markt/tlmanager/uiKeysComponents", Configuration.getInstance().getLocale());

    private MandatoryLabelHandler labelHandler;

    /**
     * The default constructor for ServiceDigitalIdentityPanel.
     */
    public ServiceDigitalIdentityPanel() {
        initComponents();
    }

    /**
     * Another constructor for ServiceDigitalIdentityPanel.
     */
    public ServiceDigitalIdentityPanel(JFileChooser fileChooser) {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serviceDigitaldentityButton = new eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton(MultiMode.MULTI_DIGITALID, null, null);
        serviceDigitaldentityButton.getMultivaluePanel().addContentWatcher(this);

        serviceDigitaldentityButton.setName("serviceDigitaldentityButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serviceDigitaldentityButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serviceDigitaldentityButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton serviceDigitaldentityButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the <code>MandatoryLabelHandler</code>
     *
     * @param labelHandler the handler
     */
    public void setLabelHandler(MandatoryLabelHandler labelHandler) {
        this.labelHandler = labelHandler;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void contentHasChanged(boolean empty, String text) {
        if (labelHandler != null) {
            labelHandler.handleLabelStateFor(this, empty);
        }
    }

    public ServiceDigitalIdentityMultivalueAdapter getServiceDigitalIdentityMultivalueAdapter() {
        final ServiceDigitalIdentityMultivalueAdapter multivalueModel = (ServiceDigitalIdentityMultivalueAdapter) serviceDigitaldentityButton.getMultivaluePanel().getMultivalueModel();
        return multivalueModel;
    }

    public void setServiceDigitalIdentityMultivalueAdapter(ServiceDigitalIdentityMultivalueAdapter serviceDigitalIdentityMultivalueAdapter) {
        serviceDigitaldentityButton.getMultivaluePanel().setMultivalueModel(serviceDigitalIdentityMultivalueAdapter);
        serviceDigitaldentityButton.refreshContentInformation();
        refreshContentInformation();

    }

    public void refreshContentInformation() {
        final ServiceDigitalIdentityMultivalueAdapter multivalueModel = (ServiceDigitalIdentityMultivalueAdapter) serviceDigitaldentityButton.getMultivaluePanel().getMultivalueModel();
        contentHasChanged(multivalueModel.isEmpty(), "");
    }

    /**
     * Empties all values in the model and resets ui components.
     */
    public void clearModel() {
        setServiceDigitalIdentityMultivalueAdapter(new ServiceDigitalIdentityMultivalueAdapter(new DigitalIdentityListType()));
    }
}